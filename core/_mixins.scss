//Core/Mixins ==========================================================================

//------------------------------------------------
//  Utilities for properties base
//------------------------------------------------

//------------------------------------------------
// Define statements only appear em debug mode
// @return {Css} definitions of properties
//------------------------------------------------
@mixin __debug() {
  @if __mapping($__map--zerw, debug) {
    @content;
  }
}

//------------------------------------------------
// Define statements only appear em debug mode
// @return {Css} definitions of properties
//------------------------------------------------
@mixin __clearfix() {
  /*
  Removed hack internet explorer css zerw since it will not support IE6 yIE7,
  annotation is done by touching adjust this issue for more recent versions of IE.
  zoom: 1;
  */
  &:before,
  &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}

//Vendor prefix
@mixin __base-prefix($name, $argument) {
  @if __mapping($__map--zerw, support-prefix) == true{
    -webkit-#{$name}: #{$argument}; // Android ≤ 2.3, iOS ≤ 4
    -ms-#{$name}: #{$argument};
    -moz-#{$name}: #{$argument}; // Firefox ≤ 28
    -o-#{$name}: #{$argument};
  }
  #{$name}: #{$argument}; //Chrome, Firefox 29+, IE 8+, Opera, Safari 5.1
}

@mixin __base-rem($property, $values) {
  $px : ();
  $rem: ();

  @each $value in $values {

    @if $value == 0 or $value == auto {
      $px : append($px , $value);
      $rem: append($rem, $value);
    }

    @else {
      $unit: unit($value);
      $val: __parseInt($value);

      @if $unit == "px" {
        $px : append($px,  $value);
        $rem: append($rem, ($val / 10 + rem));
      }

      @if $unit == "rem" {
        $px : append($px,  ($val * 10 + px));
        $rem: append($rem, $value);
      }
    }
  }

  @if $px == $rem {
    #{$property}: $px;
  } @else {
    #{$property}: $px;
    #{$property}: $rem;
  }
}

//Margin padding border mixin
@mixin __base-mpb($margin: 0, $padding: 0, $border: -1) {
  @if ($margin != -1) {
    margin: #{$margin};
  }
  @if ($padding != -1) {
    padding: #{$padding};
  }
  @if ($border != -1) {
    border: #{$border};
  }
}

//Border sizing mixin
@mixin __base-bs($type: border-box) {
  @include __base-prefix(box-sizing, $type);
}

@mixin __base-skin($color: -1, $color-text: -1, $extra: false, $underline: false) {

  @if $color-text == -1 {
    $color-text: __dynamic-text-color($color);
  }

  @if $color != -1 {

    $color-dark: __transform-color-dd($color, $darken: __mapping($__map--ui, percent-color-dark));
    $color-light: __transform-color-sl($color, 0, 2, 0);

    background-color: $color;
    border-color: $color-dark;
    @include __ui-transition-o(background-color .3s ease);

    //An event is generated for object anchors
    &:hover {
      color: $color-text;
      background-color: $color-light;
    }

    @if $extra == true {
      & li,
      & a {
        color: $color-text;
        @if $underline == true {
          text-decoration: underline;
        }
      }
      & li.active {
        color: darken($color-text, 20);
      }
    }
  }
  color: $color-text;
}

//------------------------------------------------
//  Utilities behaviors for modules
//------------------------------------------------

@mixin __behavior--status($prefix, $extra: false, $underline: false) {
    $colorstatus: $__map--ui-color-status;
    @each $key, $color in $colorstatus {
      .#{$prefix}--#{$key} {
        @include __base-skin($color, $extra: $extra, $underline: $underline);
      }
    }
}

@mixin __behavior--size($prefix, $scale: -1, $contrast: -1) {
    $psize: $__map--base-dimensions-size;
    @each $key, $size in $psize {

      @if $scale != -1 {
        $size: ($size + $scale);
      }

      @if $contrast != -1{
        $size: ($size * $contrast);
      }

      .#{$prefix}--#{$key} {
        width: #{__em($size, __mapping($__map--base, size-base-em))};
        height: #{__em($size, __mapping($__map--base, size-base-em))};
      }
    }
}

@mixin __behavior--padding($prefix, $plf: lg) {
    $psize: $__map--base-padding-size;
    @each $key, $size in $psize {
      .#{$prefix}--#{$key} {
        padding: __em($size, __mapping($__map--base, size-base-em)) __em(__mapping($__map--base-padding-size, $plf), __mapping($__map--base, size-base-em));
      }
    }
}

@mixin __behavior--padding-change($size, $plf: lg) {
    padding: #{__em($size, __mapping($__map--base, size-base-em))} #{__em(__mapping($__map--base-padding-size, $plf), __mapping($__map--base, size-base-em))};
}

@mixin __behavior--shadow($selector, $default: 0px 0px 4px 0px rgba(0, 0, 0, .5)){
    .#{$selector}--shadow {
      @include __ui-shadow-o($default);
    }
    .#{$selector}--without-shadow {
      @include __ui-shadow-o(none);
    }
}

@mixin __behavior--shadow-inside($selector, $default: inset 0 2px 2px rgba(0, 0, 0, 0.3)){
    .#{$selector}--shadow-inside {
      @include __ui-shadow-o($default);
    }
    .#{$selector}--without-shadow-inside {
      @include __ui-shadow-o(none);
    }
}

@mixin __behavior--3d($selector, $b: -1, $top: 0, $left: 1, $bottom: 4, $right: 1){
    .#{$selector}--3d{
      @include __ui-border($b, $top, $left, $bottom, $right);
    }
    .#{$selector}--without-3d{
      @include __ui-border(none, 0, 0, 0, 0);
    }
}

@mixin __behavior--fluid($selector){
  .#{$selector}--fluid{
    display: block;
    width: 100%;
  }
  .#{$selector}--without-fluid{
    display: inline-block;
    width: inherit;
  }
}


//------------------------------------------------
//  Utilities for breakpoints in media query
//------------------------------------------------

@mixin __bp-large {
  @media only screen and (max-width: 60em) {
    @content;
  }
}

@mixin __bp-medium {
  @media only screen and (max-width: 40em) {
    @content;
  }
}

@mixin __bp-small {
  @media only screen and (max-width: 30em) {
    @content;
  }
}

//------------------------------------------------
//  Utilities for css3 properties
//  Used in all Modules
//  CSS3 please! - css3 modificators
//------------------------------------------------

// The mixin opacity
@mixin __ui-opacity ( $value: 0.5 ) {
  opacity: $value;
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity="#{$value * 100}")";
  filter: alpha(opacity= $value * 100 );
  zoom: 1;
}

@mixin __ui-alpha-attribute($attribute, $color, $background) {
  $percent: alpha($color) * 100%;
  $opaque: opacify($color, 1);
  $solid-color: mix($opaque, $background, $percent);
  #{$attribute}: $solid-color;
  #{$attribute}: $color;
}

// The mixin trasnparent background
@mixin __ui-transparent($color, $alpha) {
  $rgba: rgba($color, $alpha);
  $ie-hex-str: ie-hex-str($rgba);
  @extend %__transparent-background !optional;
  background-color: $rgba;
  filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=#{$ie-hex-str},endColorstr=#{$ie-hex-str});
}

// Loop through opacities from 90 to 10 on an alpha scale
@mixin __ui-transparent-shades($name, $color) {
  @each $alpha in 90, 80, 70, 60, 50, 40, 30, 20, 10 {
    .#{$name}-#{$alpha} {
      @include __ui-transparent($color, $alpha / 100);
    }
  }
}

@mixin __ui-round($radius: __mapping($__map--ui, border-radius)) {
    @include __base-prefix(border-radius, $radius);
    @include __base-prefix(background-clip, padding-box);
}

@mixin __ui-round--top($radius) {
    border-top-right-radius: $radius;
    border-top-left-radius: $radius;
}

@mixin __ui-round--right($radius) {
    border-bottom-right-radius: $radius;
    border-top-right-radius: $radius;
}

@mixin __ui-round--bottom($radius) {
    border-bottom-right-radius: $radius;
    border-bottom-left-radius: $radius;
}

@mixin __ui-round--left($radius) {
    border-bottom-left-radius: $radius;
    border-top-left-radius: $radius;
}

@mixin __ui-border($b: __mapping($__map--base, border-size) , $bw__top: 0, $bw__left: 1, $bw__bottom: 4, $bw__right: 1) {
    $b__px: __px($b);
    $bw__top: __em($bw__top, __mapping($__map--base, size-base-em));
    $bw__left: __em($bw__left, __mapping($__map--base, size-base-em));
    $bw__bottom: __em($bw__bottom, __mapping($__map--base, size-base-em));
    $bw__right: __em($bw__right, __mapping($__map--base, size-base-em));
    $b__properties: solid transparent;

    @if $b != -1 or $b != none {
      border: #{$b__px} #{$b__properties};
    }@else{
      @if $b == none{
        border: none;
      }
    }
    @if ($bw__top != -1 and $bw__left != -1 and $bw__bottom != -1 and $bw__right != -1) {
        border-width: #{$bw__top} #{$bw__left} #{$bw__bottom} #{$bw__right};
    }
}

@mixin __ui-shadow($h-shadow: __mapping($__map--ui-shadow, hshadow), $v-shadow: __mapping($__map--ui-shadow, vshadow), $blur: __mapping($__map--ui-shadow, blur), $spread: __mapping($__map--ui-shadow, spread), $color: __mapping($__map--ui-shadow, color), $opacity: __mapping($__map--ui-shadow, opacity)) {
    @include __base-prefix(box-shadow, #{$h-shadow $v-shadow} #{$blur} #{$spread} rgba($color, $opacity));
}

@mixin __ui-shadow-o($arg...) {
    @include __base-prefix(box-shadow, $arg);
}

@mixin __ui-text-shadow($arg: 0 1px 2px rgba(0, 0, 0, 0.25)) {
    @include __base-prefix(text-shadow, $arg);
}

@mixin __ui-gradient($fcolor: __mapping($__map--ui-gradient, fcolor), $scolor: __mapping($__map--ui-gradient, scolor)) {
  background-color: $fcolor;
  background-image: -webkit-linear-gradient(top, $fcolor, $scolor); // Chrome 10-25, iOS 5+, Safari 5.1+
  background-image: linear-gradient(to bottom, $fcolor, $scolor); // Chrome 26, Firefox 16+, IE 10+, Opera
}

@mixin __ui-rgba($r, $g, $b, $opacity: __mapping($__map--ui, opacity)) {
  background-color: transparent;
  background-color: rgba($r, $g, $b, $opacity); // Chrome, Firefox 3+, IE 9+, Opera 10.10+, Safari 3+
}

@mixin __ui-rotate($r: __mapping($__map--ui, rotate)) {
  @include __base-prefix(transform, rotate($r));
}

@mixin __ui-scale($scale: __mapping($__map--ui, scale)) {
  @include __base-prefix(transform, scale($r));
}

@mixin __ui-3dtransforms($perspective: 300px, $type: "Y", $rotate: 180deg) {
  @include __base-prefix(perspective, $perspective);
  @include __base-prefix(transform, rotate#{$type}($rotate));
  @include __base-prefix(transform-style, preserve-3d);
}

@mixin __ui-transition-s($time: 0.3s, $ease: __mapping($__map--ui, ease)) {
  @include __base-prefix(transition, all $time $ease);
}

@mixin __ui-transition-o($args...) {
  @include __base-prefix(transition, $args);
}

@mixin __ui-textshadow($h-shadow: __mapping($__map--ui-text-shadow, hshadow), $v-shadow: __mapping($__map--ui-text-shadow, vshadow), $blur: __mapping($__map--ui-text-shadow, blur), $color: __mapping($__map--ui-text-shadow, color)) {
  text-shadow: $h-shadow $v-shadow $blur $color; // Chrome, Firefox 3.5+, IE 10+, Opera 9+, Safari 1+
}

@mixin __ui-opacity($opacity: __mapping($__map--ui, opacity)) {
  zoom: 1;
  filter: alpha(opacity=__calculate-opacity($opacity)); //IE8
  opacity: $opacity; // Android 2.1+, Chrome 4+, Firefox 2+, IE 9+, iOS 3.2+, Opera 9+, Safari 3.1+
}

@mixin __ui-bgsize($size: __mapping($__map--ui, background-size)) {
  @include __base-prefix(background-size, $size);
}

@mixin __ui-keyframes($animation-name) {
  @-webkit-keyframes #{$animation-name}
  {
    @content;
  }
  @-moz-keyframes #{$animation-name}
  {
    @content;
  }
  @-ms-keyframes #{$animation-name}
  {
    @content;
  }
  @-o-keyframes #{$animation-name}
  {
    @content;
  }
  @keyframes #{$animation-name}
  {
    @content;
  }
}

@mixin __ui-animation($str) {
  @include __base-prefix(animation, $str);
}

//------------------------------------------------
//  Utilities for texts
//  Used in Module _text.scss
//------------------------------------------------

@mixin __font-s($fs: 1em, $lh: 1.4) {
  font-size: $fs;
  line-height: $lh;
}

@mixin __font($size, $line, $margin-bottom: 0, $family: __mapping($__map--base-font, family), $color: __mapping($__map--base-font, color), $weight: __mapping($__map--base-font, weight)) {
  font-size: __em($size);
  line-height: ($line/$size);
  font-family: $family;
  margin-bottom: __em($margin-bottom, $size);
  color: $color;
}

@mixin __font-size($size) {
  font-size: $size;
  font-size: __rem($size);
}

@mixin __font-auto-size($size, $line: __mapping($__map--base-font, line-height)) {
  font-size: __em($size);
  line-height: ($line/$size);
}


@mixin debug-map($map) {
  @at-root {
    @debug-map {
      __toString__: inspect($map);
      __length__: length($map);
      __depth__: depth($map);
      __keys__: map-keys($map);
      __properties__ {
        @each $key, $value in $map {
          #{'(' + type-of($value) + ') ' + $key}: inspect($value);
        }
      }
    }
  }
}
